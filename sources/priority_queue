#include <iostream>
using namespace std;
template <class t>
class priority_queue1
{
	struct node {
		t data;
		node* left, * right;

	};
	node* root=NULL;
	int t_size=0;
	node* insertHelp(node* temp, t item) {
		node* newItem = new node;
		newItem->data = item;
		newItem->left = newItem->right = NULL;
		if (empty())
		{
			temp = newItem;
			t_size++;
		}
		else {
			if (item <= temp->data)
			{
				if (temp->left == NULL) {
					temp->left = newItem;
					t_size++;
				}
				else {
					insertHelp(temp->left, item);
				}
			}
			else
			{
				if (temp->right == NULL) {
					temp->right = newItem;
					t_size++;
				}
				else {
					insertHelp(temp->right, item);
				}
			}
		}
		return temp;


	}
	t getMaxhelper(node* temp) {
		if (temp->right == NULL)
			return temp->data;
		else
			getMaxhelper(temp->right);
	}
	node* removeHelper(node* temp, t item) {
		if (temp == NULL)return temp;
		else if (item < temp->data)
		{
			temp->left = removeHelper(temp->left, item);
		}
		else if (item > temp->data) {
			temp->right = removeHelper(temp->right, item);
		}
		else {
			if (temp->left == NULL)
			{
				t_size--;
				node* helper = temp->right;
				delete temp;
				return helper;
			}
			else if (temp->right == NULL)
			{
				t_size--;
				node* helper = temp->left;
				delete temp;
				return helper;
			}
			else {
				t max = getMaxhelper(temp->left);
				temp->data = max;
				temp->left = removeHelper(temp->left, max);
				t_size--;
			}
		}
		return temp;
	}
public :
	
	bool empty() { return root == NULL; }
	void push(t value) {
		root = insertHelp(root, value);
	}
	t top() {
		return getMaxhelper(root);
	}
	void pop() {
		t val = top();
		root = removeHelper(root,val);
	}
	int size() { return t_size; }
};
int main()
{
	priority_queue1<int> p;
	p.push(10);
	p.push(15);
	p.push(144);
	p.push(122);

	p.pop();

	cout << p.size() << endl;
	cout << p.top() << endl;
}
